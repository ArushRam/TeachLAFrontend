<div style={panelStyle}>
          <Dock position='left'
                isVisible={isVisible}
                size={size}
                dimMode="transparent"
                onSizeChange={(newSize)=>{
                  if(newSize < 0.3)                                     //limiting the max size of the panel to 30% of the screen
                    this.handleOnSizeChange(newSize)
                }}
                onVisibleChange={this.handleOnVisibleChange}
                dockStyle={{width:panelSize}}                           
          >
            <div className="panel">
              <div className="panel-collapse-button">
                <div/><div onClick={this.handleOnVisibleChange}>&larr;</div>                                        {/*character is leftward facing arrow*/}
                </div>
                <div className="panel-content">
                  <img className="panel-image" src={user.photoURL ? user.photoURL+"?height=800" : defaultPic}/>        {/*if there's a photourl, use it, otherwise use the default image (the ?height=500 to make sure the picture sent is resized to 500px tall*/}
                  <div className="panel-name">{user.displayName || "Joe Bruin"}</div>                                 {/*if there's no displayName, use the default name "Joe Bruin"*/}
                  <div className="panel-options">
                    <ul className="panel-options-list">
                      <li className="panel-options-item">Profile</li>                                                 {/** @todo relocate to Profile page*/}
                      <li className="panel-options-item">Sketches</li>                                                {/** @todo relocate to sketches page*/}
                      <li className="panel-options-item" onClick={logout}>Signout</li>
                    </ul>
                  </div>
                </div>
                <div className="editor-footer">
                  <img className="editor-footer-image" src="img/tla-footer.png"/>
                </div>
              </div>
            </Dock>
          </div>




        <div style={codeStyle}>
          <SplitPane
            pane1Style={this.state.paneStyle} 
            split="vertical"                              //the resizer is a vertical line (horizontal means resizer is a horizontal bar)
            minSize={window.innerWidth*(1-size)/4}        //minimum size of code is 25% of screen not including panel adn max size is 50%
            maxSize={isVisible ? window.innerWidth*(1-size)*3/4 : window.innerWidth*3/4}      //maximum size is 75% of the screen if the panel  is open, 50% otherwise
            size={codeSize}                           //the initial size of the text editor section
            allowResize={true}
            onChange={ (codeSize) => {
              this.setState({codeSize, paneStyle:{transition:"none"}})
            }}
          >
            <div  className="code-section">
              <div className="editor-header">
                {/*if the left panel is open, show an empty div, otherwise show a > that when clicked, opens the panel*/}
                {isVisible ? <div className='editor-expand-panel' style={{width:"0px", padding:"0"}}/> : <div className='editor-expand-panel' title="Open Profile Panel" onClick={this.handleOnVisibleChange}>></div>}
                <div className="editor-language-dropdown">
                  <Dropdown
                    isOpen={isOpen}
                    toggle={()=>{this.setState({isOpen:!isOpen})}}
                  >
                    <DropdownToggle caret>   {/* caret adds the downward arrow next to the selected language */}
                      <div style={{display:"inline-block"}}>{language}</div>                                {/*language comes from the state, it represents the currently selected language*/}
                    </DropdownToggle>
                    <DropdownMenu>
                      <DropdownItem onClick={() => {this.setState({language:"Python", mode:this.nameToMode("Python")})}}>Python</DropdownItem>
                      <DropdownItem onClick={() => {this.setState({language:"Javascript", mode:this.nameToMode("Javascript")})}}>Javascript</DropdownItem>
                      <DropdownItem onClick={() => {this.setState({language:"Processing", mode:this.nameToMode("Processing")})}}>Processing</DropdownItem>
                      <DropdownItem onClick={() => {this.setState({language:"Java", mode:this.nameToMode("Java")})}}>Java</DropdownItem>
                      {/* <DropdownItem onClick={() => {this.setState({language:"C++", mode:this.nameToMode("C++")})}}>C++</DropdownItem> */} {/*disabled bc C++ is gross and probably not wanted*/}
                      <DropdownItem onClick={() => {this.setState({language:"HTML", mode:this.nameToMode("HTML")})}}>HTML</DropdownItem>
                    </DropdownMenu>
                  </Dropdown>
                </div>
                <div className="editor-run">
                  <button className="editor-run-button">
                    <div className="editor-run-button-content">
                    <span style={{flex:"1 1 auto", width:"100%"}}>></span>    {/* > takes up as much space as possible while the Run Code is fixed size*/}
                    <span style={{flex:"0 0 auto"}}>
                      Run Code
                    </span>
                    </div>
                  </button>
                </div>
              </div>
              <div className="text-editor-container">
                {/**
                 * @prop {function} editorDidMount - used for selected line highlighting
                 * @prop {function} onCursor - passed a codeMirrorInstance; triggered when the user changes the line the cursor is on;
                */}
                <CodeMirror
                  editorDidMount={(codeMirrorInstance)=>{this.setState({codeMirrorInstance})}}     
                  value={this.state.code}                                                           
                  lineWrapping                                                                      
                  height="100%"                                                                     
                  options={options}                                                                 
                  onCursor={(nextState)=>{                                                          
                    const {codeMirrorInstance, currentLine} = this.state
                    let {line} = nextState.getCursor()
                    if(codeMirrorInstance){
                      codeMirrorInstance.removeLineClass(currentLine, 'wrap', 'selected-line')    //removeLineClass removes the back highlight style from the last selected line
                      codeMirrorInstance.addLineClass(line, 'wrap', 'selected-line')              //addLineClass adds the style to the newly selected line
                    }
                    this.setState({currentLine:line})
                  }}
                  onBeforeChange={(editor, data, code) => {
                    this.setState({code});
                  }}
                  onChange={(editor, data, code) => {
                    this.updateCode(code);
                  }}
                />
              </div>
            </div>
            <div className="editor-output">
              <div className="editor-header">
                <div style={{flex:"1 1 auto"}}> </div>
                <div className="editor-run">
                  <button className="editor-run-button" style={{backgroundColor:"#ec4848"}}>
                      Clear
                  </button>
                </div>
              </div>
              <div className="editor-output-content">
              </div>
            </div>
          </SplitPane>
        </div>